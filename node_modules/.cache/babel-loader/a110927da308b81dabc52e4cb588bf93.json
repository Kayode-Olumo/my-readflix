{"ast":null,"code":"import _objectSpread from \"/Users/kayodeolumo/Desktop/readflix/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/kayodeolumo/Desktop/readflix/src/providers/index.js\";\nimport React, { Component } from 'react';\nexport const Context = React.createContext();\nexport default class Index extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allBooks: [],\n      currentlyReading: [],\n      wantToRead: [],\n      read: [],\n      updateAllBooks: allBooks => {\n        //returns a new array if content matches e.g. currentlyReading\n        const currentlyReading = allBooks.filter(book => book.shelf === 'currentlyReading');\n        const wantToRead = allBooks.filter(book => book.shelf === 'wantToRead');\n        const read = allBooks.filter(book => book.shelf === 'read');\n        console.log(allBooks);\n        console.log(allBooks, currentlyReading, wantToRead, read);\n        this.setState({\n          allBooks,\n          currentlyReading,\n          wantToRead,\n          read\n        });\n      },\n      changeCategory: (book, shelf, allShelfs) => {\n        //moves book from one shelf to another\n        console.log(book, shelf);\n        const allBooks = this.state.allBooks;\n        const newBooks = allBooks.map(allBooks => {\n          const foundID = allShelfs[shelf].find(bookID => bookID === allBooks.id);\n\n          if (foundID) {\n            allBooks.shelf = shelf;\n          }\n\n          return allBooks;\n        });\n        this.state.updateAllBooks(newBooks);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Context.Provider, {\n      value: _objectSpread({}, this.state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["/Users/kayodeolumo/Desktop/readflix/src/providers/index.js"],"names":["React","Component","Context","createContext","Index","constructor","state","allBooks","currentlyReading","wantToRead","read","updateAllBooks","filter","book","shelf","console","log","setState","changeCategory","allShelfs","newBooks","map","foundID","find","bookID","id","render","props","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,OAAO,GAAGF,KAAK,CAACG,aAAN,EAAhB;AAEP,eAAe,MAAMC,KAAN,SAAoBH,SAApB,CAA6B;AACxCI,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACLC,MAAAA,QAAQ,EAAE,EADL;AAELC,MAAAA,gBAAgB,EAAE,EAFb;AAGLC,MAAAA,UAAU,EAAE,EAHP;AAILC,MAAAA,IAAI,EAAE,EAJD;AAKDC,MAAAA,cAAc,EAAGJ,QAAD,IAAc;AAC1B;AACA,cAAMC,gBAAgB,GAAGD,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAe,kBAAvC,CAAzB;AACA,cAAML,UAAU,GAAGF,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAe,YAAvC,CAAnB;AACA,cAAMJ,IAAI,GAAGH,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAe,MAAvC,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAqBC,gBAArB,EAAsCC,UAAtC,EAAiDC,IAAjD;AAEA,aAAKO,QAAL,CAAc;AAACV,UAAAA,QAAD;AAAWC,UAAAA,gBAAX;AAA6BC,UAAAA,UAA7B;AAAyCC,UAAAA;AAAzC,SAAd;AACH,OAdA;AAgBDQ,MAAAA,cAAc,EAAE,CAACL,IAAD,EAAOC,KAAP,EAAcK,SAAd,KAA4B;AACxC;AAEAJ,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,KAAlB;AAHwC,cAIjCP,QAJiC,GAIrB,KAAKD,KAJgB,CAIjCC,QAJiC;AAKxC,cAAMa,QAAQ,GAAGb,QAAQ,CAACc,GAAT,CAAad,QAAQ,IAAI;AACtC,gBAAMe,OAAO,GAAGH,SAAS,CAACL,KAAD,CAAT,CAAiBS,IAAjB,CACZC,MAAM,IAAIA,MAAM,KAAKjB,QAAQ,CAACkB,EADlB,CAAhB;;AAGA,cAAGH,OAAH,EAAW;AACPf,YAAAA,QAAQ,CAACO,KAAT,GAAiBA,KAAjB;AACH;;AACD,iBAAOP,QAAP;AACH,SARgB,CAAjB;AASA,aAAKD,KAAL,CAAWK,cAAX,CAA0BS,QAA1B;AACH;AA/BA,KAAb;AAiCC;;AAELM,EAAAA,MAAM,GAAE;AACJ,WACA,oBAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,oBAAM,KAAKpB,KAAX,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKqB,KAAL,CAAWC,QADhB,CADA;AAKH;;AA5CuC","sourcesContent":["import React, { Component } from 'react';\n\nexport const Context = React.createContext();\n\nexport default class Index extends Component{\n    constructor(){\n        super()\n        this.state = {\n                allBooks: [],\n                currentlyReading: [],\n                wantToRead: [],\n                read: [],\n                    updateAllBooks: (allBooks) => {\n                        //returns a new array if content matches e.g. currentlyReading\n                        const currentlyReading = allBooks.filter(book => book.shelf === 'currentlyReading');\n                        const wantToRead = allBooks.filter(book => book.shelf === 'wantToRead');\n                        const read = allBooks.filter(book => book.shelf === 'read');\n                        console.log(allBooks)\n                        console.log(allBooks,currentlyReading,wantToRead,read)\n\n                        this.setState({allBooks, currentlyReading, wantToRead, read})\n                    },\n\n                    changeCategory: (book, shelf, allShelfs) => {\n                        //moves book from one shelf to another\n\n                        console.log(book, shelf)\n                        const {allBooks} = this.state;\n                        const newBooks = allBooks.map(allBooks => {\n                            const foundID = allShelfs[shelf].find(\n                                bookID => bookID === allBooks.id\n                            );\n                            if(foundID){\n                                allBooks.shelf = shelf;\n                            }\n                            return allBooks;\n                        });\n                        this.state.updateAllBooks(newBooks);\n                    }\n            }\n        }\n\n    render(){\n        return(\n        <Context.Provider value={{...this.state}}>\n            {this.props.children}\n        </Context.Provider>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}